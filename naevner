const naevner = (color, approximationSuffix = "ish") => {
  let lightness,
    lightnessToPrint,
    hue,
    hueWithNuanceToPrint,
    hueNuance,
    saturation,
    saturationToPrint,
    approximationSuffixToPrint = approximationSuffix,
    colorDescription,
    parsedColor;

  // hexToRGB + RGBToHSL functions from https://css-tricks.com/converting-color-spaces-in-javascript/
  function hexToRGB(h) {
    let r = '0', g = '0', b = '0';

    if (h.length == 4) {
      r = "0x" + h[1] + h[1];
      g = "0x" + h[2] + h[2];
      b = "0x" + h[3] + h[3];
    } else if (h.length == 7) {
      r = "0x" + h[1] + h[2];
      g = "0x" + h[3] + h[4];
      b = "0x" + h[5] + h[6];
    }

    return { 
      r: parseInt(`${r}`), 
      g: parseInt(`${g}`), 
      b: parseInt(`${b}`) 
    }
  }

  function RGBToHSL(r, g, b) {
    // Make r, g, and b fractions of 1
    r /= 255;
    g /= 255;
    b /= 255;

    // Find greatest and smallest channel values
    let cmin = Math.min(r, g, b),
        cmax = Math.max(r, g, b),
        delta = cmax - cmin,
        h = 0,
        s = 0,
        l = 0;

    // Calculate hue
    if (delta == 0)
      h = 0;
    else if (cmax == r)
      h = ((g - b) / delta) % 6;
    else if (cmax == g)
      h = (b - r) / delta + 2;
    else
      h = (r - g) / delta + 4;

    h = Math.round(h * 60);

    // Make negative hues positive behind 360Â°
    if (h < 0)
      h += 360;

    // Calculate lightness
    l = (cmax + cmin) / 2;

    // Calculate saturation
    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));

    // Multiply l and s by 100
    s = +(s * 100).toFixed(1);
    l = +(l * 100).toFixed(1);

    return {
      h: Math.floor(h),
      s: Math.floor(s),
      l: Math.floor(l),
    };
  }

  const numberIsInRange = (colorAspectValue, range) => {
    var fullRange = range.indexOf("-"); 
    var startOfRange = parseInt(range.substr(0, fullRange));
    var endOfRange = parseInt(range.substr(fullRange + 1)); 
    if (colorAspectValue >= startOfRange && colorAspectValue <= endOfRange){
      return true;
    } else {
      return false;
    }
  }

  //parse color input
  parsedColor = /^#.*/g.test(color) ? color : "#" + color;

  //assess color code:
  const colorInRGB = hexToRGB(parsedColor);
  const { h, s, l } = RGBToHSL(colorInRGB.r, colorInRGB.g, colorInRGB.b);

  //reset values
  lightness = null;
  lightnessToPrint = null;
  hue = null;
  hueWithNuanceToPrint = null;
  hueNuance = null;
  saturation = null;
  saturationToPrint = null;

  //determine saturation term
  if (numberIsInRange(s, "0-0")) { saturation = "monochrome" }
  else if (numberIsInRange(s, "1-6")) { saturation = "grey" }
  else if (numberIsInRange(s, "7-10")) { saturation = `grey${approximationSuffixToPrint}` }
  else if (numberIsInRange(s, "11-35")) { saturation = "faded" }
  else if (numberIsInRange(s, "36-65")) { saturation = "calm" }
  else if (numberIsInRange(s, "66-90")) { saturation = "clear" }
  else if (numberIsInRange(s, "91-100")) { saturation = "vibrant" }

  //determine lightness term
  if (numberIsInRange(l, "0-5")) { lightness = "black" }
  else if (numberIsInRange(l, "6-10")) { lightness = "very dark" }
  else if (numberIsInRange(l, "11-35")) { lightness = "dark" }
  else if (numberIsInRange(l, "36-65")) { lightness = null }
  else if (numberIsInRange(l, "66-85")) { lightness = "light" }
  else if (numberIsInRange(l, "86-98")) { lightness = "very light" }
  else if (numberIsInRange(l, "98-100")) { lightness = "white" }

  //determine hue term
  if ((numberIsInRange(h, "0-3")) || (numberIsInRange(h, "346-360"))) { //red
    if ((saturation !== "grey") && (lightness !== "black") && (l < 20 || s < 40)) { hue = "brown"; hueNuance = "red" }
    else if (l < 30 || s < 50) { hue = "red"; hueNuance = "brown" }
    else { hue = "red"; hueNuance = null }
  }
  else if (numberIsInRange(h, "4-6")) { //orange-ish red
    if ((saturation !== "grey") && (lightness !== "black") && (l < 35 || s < 50)) { hue = "brown"; hueNuance = "orange" }
    else { hue = "red"; hueNuance = "orange" }
  }
  else if (numberIsInRange(h, "7-12")) { //red-ish orange
    if ((saturation !== "grey") && (lightness !== "black") && (l < 35 || s < 50)) { hue = "brown"; hueNuance = "orange" }
    else if ((l < 40 && s < 90) || (l < 45 && s < 70)) { hue = "orange"; hueNuance = "brown" }
    else { hue = "orange"; hueNuance = "red" }
  }
  else if (numberIsInRange(h, "13-35")) { // orange
    if ((saturation !== "grey") && (lightness !== "black") && (l < 35 || s < 50)) { hue = "brown"; hueNuance = "orange" }
    else if ((l < 40 && s < 90) || (l < 45 && s < 70)) { hue = "orange"; hueNuance = "brown" }
    else { hue = "orange"; hueNuance = null }
  }
  else if (numberIsInRange(h, "36-42")) { //yellow-ish orange
    if ((saturation !== "grey") && (lightness !== "black") && (l < 50) || s < 70) { hue = "brown"; hueNuance = "olive" }
    else { hue = "orange"; hueNuance = "yellow" }
  }
  else if (numberIsInRange(h, "43-46")) { //orange-ish yellow
    if ((saturation !== "grey") && (lightness !== "black") && (l < 50 || s < 70)) { hue = "olive"; hueNuance = "brown" }
    else { hue = "yellow"; hueNuance = "orange" }
  }
  else if (numberIsInRange(h, "47-61")) { //yellow
    if ((saturation !== "grey") && (lightness !== "black") && (l < 50 || s < 70)) { hue = "olive"; hueNuance = null }
    else { hue = "yellow"; hueNuance = null }
  }
  else if (numberIsInRange(h, "62-67")) { //green-ish yellow
    if ((saturation !== "grey") && (lightness !== "black") && (l < 50 || s < 70)) { hue = "olive"; hueNuance = "green" }
    else { hue = "yellow"; hueNuance = "green" }
  }
  else if (numberIsInRange(h, "68-74")) { //yellow-ish green
    if ((saturation !== "grey") && (lightness !== "black") && (l < 50 || s < 70)) { hue = "green"; hueNuance = "olive" }
    else { hue = "green"; hueNuance = "yellow" }
  }
  else if (numberIsInRange(h, "75-147")) { hue = "green"; hueNuance = null }
  else if (numberIsInRange(h, "148-157")) { hue = "green"; hueNuance = "turquoise" }
  else if (numberIsInRange(h, "158-172")) { hue = "turquoise"; hueNuance = null }
  else if (numberIsInRange(h, "173-193")) { hue = "cyan"; hueNuance = null }
  else if (numberIsInRange(h, "194-201")) { hue = "cyan"; hueNuance = "blue" }
  else if (numberIsInRange(h, "202-211")) { hue = "blue"; hueNuance = "cyan" }
  else if (numberIsInRange(h, "212-255")) { hue = "blue"; hueNuance = null }
  else if (numberIsInRange(h, "256-258")) { hue = "blue"; hueNuance = "purple" }
  else if (numberIsInRange(h, "259-265")) { hue = "purple"; hueNuance = "blue" }
  else if (numberIsInRange(h, "266-280")) { hue = "purple"; hueNuance = null }
  else if (numberIsInRange(h, "281-287")) { hue = "purple"; hueNuance = "magenta" }
  else if (numberIsInRange(h, "288-298")) { hue = "magenta"; hueNuance = "purple" }
  else if (numberIsInRange(h, "299-316")) { hue = "magenta"; hueNuance = null }
  else if (numberIsInRange(h, "317-337")) {  //red-ish magenta
    if ((saturation !== "grey") && (lightness !== "black") && (l < 30 || s < 40)) { hue = "magenta"; hueNuance = "brown" }
    else { hue = "magenta"; hueNuance = "red" }
  }
  else if (numberIsInRange(h, "338-345")) { //magenta-ish red
    if ((saturation !== "grey") && (lightness !== "black") && (l < 35 || s < 50)) { hue = "brown"; hueNuance = "magenta" }
    else { hue = "red"; hueNuance = "magenta" }
  }

  // For the last two groups below, we need to construct a natural-language sentence that can handle multiple adjectives with proper punctuation
  lightnessToPrint = lightness ? lightness + ", " : "";
  saturationToPrint = hueNuance ? saturation + ", " : saturation + " ";
  hueWithNuanceToPrint = hueNuance ? hueNuance + approximationSuffixToPrint + " " + hue : hue;

  // Is monochrome
  if (saturation == "monochrome") {
    if (lightness == "black" || lightness == "white") {
      colorDescription = `pure ${lightness}`;
    } else {
      if (!lightness) { lightness = "" }
      colorDescription = `${lightness} grey`;
    }
  }

  // Tinted black
  else if (lightness == "black") {
    colorDescription = `${hue}-tinted black`;
  }

  // Tinted white
  else if (lightness == "white") {
    colorDescription = `${hue}-tinted off-white`;
  }

  // Tinted grey - combine hue, lightness, saturation to determine color name:
  else if (saturation == "grey") {
    colorDescription = `${lightnessToPrint}${hue}${approximationSuffixToPrint} ${saturation}`;
  }

  // Any other color - combine hue, lightness, saturation to determine color name:
  else {
    colorDescription = `${lightnessToPrint}${saturationToPrint}${hueWithNuanceToPrint}`.replace(/\w\S*/g, (word) => word.charAt(0).toUpperCase() + word.substr(1).toLowerCase());
  }

  // Get color mood
  var r = parseInt(parsedColor.substring(1, 3), 16);
  var g = parseInt(parsedColor.substring(3, 5), 16);
  var b = parseInt(parsedColor.substring(5, 7), 16);

  var brightness = (r * 299 + g * 587 + b * 114) / 1000;

  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var delta = max - min;
  var saturationMood = delta / (255 - Math.abs(max + min - 255));

  var hueMood = Math.atan2(Math.sqrt(3) * (g - b), 2 * r - g - b);
  if (hueMood < 0) {
    hueMood += 2 * Math.PI;
  }
  hueMood = hueMood * (180 / Math.PI);

  var mood = "";

  if (brightness < 32) {
    mood = "Deep";
  } else if (brightness >= 32 && brightness < 48) {
    mood = "Mysterious and Dark";
  } else if (brightness >= 48 && brightness < 64) {
    mood = "Moody";
  } else if (brightness >= 64 && brightness < 96) {
    mood = "Classic";
  } else if (brightness >= 96 && brightness < 128) {
    if (saturationMood < 0.2) {
      mood = "Subdued and Intriguing";
    } else if (hueMood >= 45 && hueMood < 135) {
      mood = "Warm and Serene";
    } else if (hueMood >= 135 && hueMood < 225) {
      mood = "Mysterious and Calming";
    } else {
      mood = "Tranquil and Alluring";
    }
  } else if (brightness >= 128 && brightness < 160) {
    if (saturationMood < 0.2) {
      mood = "Subtle and Captivating";
    } else if (hueMood >= 45 && hueMood < 135) {
      mood = "Soft and Elegant";
    } else if (hueMood >= 135 && hueMood < 225) {
      mood = "Neutral and Harmonious";
    } else {
      mood = "Sophisticated and Graceful";
    }
  } else if (brightness >= 160 && brightness < 192) {
    if (saturationMood < 0.2) {
      mood = "Delicate and Charming";
    } else if (hueMood >= 45 && hueMood < 135) {
      mood = "Cheerful and Radiant";
    } else if (hueMood >= 135 && hueMood < 225) {
      mood = "Joyful and Invigorating";
    } else {
      mood = "Vibrant and Exciting";
    }
  } else if (brightness >= 192 && brightness < 224) {
    if (saturationMood < 0.2) {
      mood = "Subdued and Mysterious";
    } else if (hueMood >= 45 && hueMood < 135) {
      mood = "Playful and Dynamic";
    } else if (hueMood >= 135 && hueMood < 225) {
      mood = "Luminous and Ethereal";
    } else {
      mood = "Sparkling and Enchanting";
    }
  } else {
    mood = "Serene";
  }

  return {
    description: colorDescription,
    mood: mood,
  };
};
